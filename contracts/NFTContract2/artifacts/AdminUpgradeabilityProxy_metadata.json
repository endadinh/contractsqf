{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "logic",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beacon",
						"type": "address"
					}
				],
				"name": "BeaconUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address",
						"name": "admin_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "changeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "implementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "implementation_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"admin()": {
					"details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
				},
				"changeAdmin(address)": {
					"details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
				},
				"implementation()": {
					"details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
				},
				"upgradeTo(address)": {
					"details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
				},
				"upgradeToAndCall(address,bytes)": {
					"details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NFTContract2/import.sol": "AdminUpgradeabilityProxy"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/NFTContract2/Address.sol": {
			"keccak256": "0xd217e5030771ed77e0df8d1028f05abdaba7df6991fc6e03229d8624c1999d9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f918396df8f3717ca4d2f978757604eb540b256a87e898e30105fab09010666",
				"dweb:/ipfs/QmczhRz4N5D1vfWU1EGAGStDP57zNMLmqde9GBW3eFbAHR"
			]
		},
		"contracts/NFTContract2/Context.sol": {
			"keccak256": "0xba6ddba08488c0fd0249ecbf73d94db554b664e5460e05335633d38988fb1947",
			"license": "MIT",
			"urls": [
				"bzz-raw://8d39e2090185cd7852447d004adb908b40e2c7adc8831ee1a7d6eb6dea664ddc",
				"dweb:/ipfs/QmQZPEkHcJ8hbEbRr8vvUrCWPs7XRBmwLXbUQc9Mmx39Lx"
			]
		},
		"contracts/NFTContract2/ERC1967Proxy.sol": {
			"keccak256": "0x2f7c97e3a1541fcd00af599fb6be770518af3af0f984a634d88416b28e9648b6",
			"license": "MIT",
			"urls": [
				"bzz-raw://07f75eb2339f80a4fb2c1aa631c67cb6db5e4e4cefaef4cd95a9fb7cfb18b506",
				"dweb:/ipfs/QmbP7hu2HUyrrBnXEh86Kq5C3FZgzyFY8SnbFbYtnGT8Cn"
			]
		},
		"contracts/NFTContract2/ERC1967Upgrade.sol": {
			"keccak256": "0xa25ee4e92c4ae586e422260ce072247349cc8b2a969f10b3ef9d7f0aabfb7935",
			"license": "MIT",
			"urls": [
				"bzz-raw://094d17181b63f9dc747ac0314f7366ec2ba43fd0cab12f228df305838b98dd25",
				"dweb:/ipfs/QmXGbasnBYxZkqpsFRf8MSxhSeRJjqUthVGpfRVCaEMSiW"
			]
		},
		"contracts/NFTContract2/IBeacon.sol": {
			"keccak256": "0x69e09c6f079130e3608a163b7589a29baccdb4fc9a3b1f8b437c08e2e35395c0",
			"license": "MIT",
			"urls": [
				"bzz-raw://d51b01c145cb8b76ae809b2688272da628f74ddc2526502fcbc5da0b2d1c138f",
				"dweb:/ipfs/QmWHJjhBKbWWNwewrxVSgFWyLPW3PEBxkHbzy9B8r2onEM"
			]
		},
		"contracts/NFTContract2/Ownable.sol": {
			"keccak256": "0x0d12b2cbe43df7cd2ab8a6ab797880fd04bfc0f5399276db8f38d64b23163b38",
			"license": "MIT",
			"urls": [
				"bzz-raw://3d45152daaf345c4dd23f27313c8a37c09826e2a603a73e331439c2536394082",
				"dweb:/ipfs/QmWtv9RUodLUTgov4uYSK2udQ5iBrxN6e3U8hb36dWRCkq"
			]
		},
		"contracts/NFTContract2/Proxy.sol": {
			"keccak256": "0x1b9788d2f62369d55aef39442b0a8c9b05114ff6cb0c59b4f0f4485d1648f0f2",
			"license": "MIT",
			"urls": [
				"bzz-raw://35d1f8588cf1c70820a1aa2249862d663db591327cc0f94efad1d615c3ec76b4",
				"dweb:/ipfs/QmT4FW1G1unTdr7MTNHaUvDndjrM5Gj5AYcFMvkvq3HnXh"
			]
		},
		"contracts/NFTContract2/ProxyAdmin.sol": {
			"keccak256": "0xc1faa235878f4632b501f140a0f1fd6232d396c95016b25e3c125be03520d6e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://c1da83646ff881311040eb88e9e3b9817a0e75524465446b17b75fc0f8c4262b",
				"dweb:/ipfs/QmVSyLbpF8H7DucKH6qfD1SVyvyBb5KTGJQauwxUfWN3Ee"
			]
		},
		"contracts/NFTContract2/StorageSlot.sol": {
			"keccak256": "0x8b11be685cb1f1a574707f89190beac61ade63e30a1b98aca146b29f0e6b3e50",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d128b68c41e2f9007bafd39531ba1f1798587ac5760ca9da0440fe7c35d2315",
				"dweb:/ipfs/QmatXLGSAw6UM69g46qbxVbaCsCH6mEHqkanDCR2KpH9Yo"
			]
		},
		"contracts/NFTContract2/TransparentUpgradeableProxy.sol": {
			"keccak256": "0x4ae6dcba77144ea2929c40fc64c96fd18c2783d409ab6aa9fb7141bddad279bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://16e89f9e79c5f0e6807489c9df37da942522d747574afd4409401b9e98ba2b1b",
				"dweb:/ipfs/QmboxeMJbtaXdFraVFWhz5kDscVria5WLQfaYT8bqdWE5v"
			]
		},
		"contracts/NFTContract2/import.sol": {
			"keccak256": "0xa958417c9aaedf63a2fdb59ac57db3387815ab749a8ad07b9f8a8c770d6eaebd",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc6507a5461eba04475b0e2ef31d77120691fb564a3cdfcbd5a56e0ebdd2a799",
				"dweb:/ipfs/QmQezhi3cAUQ4Z42fzjF2P7L5Zrq1Eon2Ywj2ARVsHZzy9"
			]
		}
	},
	"version": 1
}