{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Marketplace2/Marketplace.sol": "ReentrancyGuard"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Marketplace2/Marketplace.sol": {
			"keccak256": "0x66e4770f7573cc5581452e1e445e2b370e18585ccf36bc8831e367d8d7c78bc1",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc15661ecf3f7e6f429a7b809f802e889dac939906d462231a8ad5f313437f7c",
				"dweb:/ipfs/QmYX3nNvMtdmcyeiuJXZiZwr7wzG3qmiPEJbtTzmg4KiJD"
			]
		}
	},
	"version": 1
}